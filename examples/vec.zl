let i64 = int(64)
let i8 = int(8)

extern fn malloc(size: i64) -> *i8
extern fn realloc(ptr: *i8, new_size: i64) -> *i8

extern fn puts (input: *i8) -> i64

let Vec = fn(item_type: type) -> type {
  struct {
    ptr: *item_type,
    len: i64,
    cap: i64
  }
}

let vec_new = fn(item_type: type) -> Vec(item_type) {
  Vec(item_type) [
    ptr: malloc(0), // Start with a null-like pointer
    len: 0,
    cap: 0
  ]
}

let append = fn(self: Vec(i8), item: i8) -> Vec(i8) {
  let mut self = self;
  if self.len == self.cap {
    let new_cap = if self.cap == 0 { 4 } else { self.cap * 2 };
    let new_size = new_cap;

    self.ptr = realloc(self.ptr, new_size);
    self.cap = new_cap;
  };

  self.ptr[self.len] = item;
  self.len = self.len + 1;

  self
}

let main = fn() -> i64 {
  let mut my_vec = vec_new(i8);

  for let mut i: i8 = 97; i < 105; i = i + 1 {
      my_vec = append(my_vec, i);
  };

  my_vec = append(my_vec, '\n');

  puts(my_vec.ptr);
  0
}
